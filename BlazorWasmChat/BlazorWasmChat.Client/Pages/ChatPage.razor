@page "/Chat"
@using BlazorWasmChat.Client.ChatServices
@using ChatModels
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveWebAssembly
@inject ChatService _chatService

<PageTitle>Chat</PageTitle>

<div class="row">
    <div class="col-lg-7">
        <div class="card"> 
            <div class="card-header">Chat</div>

            <div class="card-body">
                <ul class="list-group">
                    @foreach (var chat in _chatService.Chats)
                    {
                        <li class="list-group-item mb-2">
                            @chat.DateTime.Date.ToString("dd/MM/yy");
                            <br />
                            <span class="fw-bold">@chat.UserName:</span>
                            <br />
                            @chat.Message
                        </li>
                    }
                </ul>
                
                <div class="mt-3">

                    <EditForm Model="_chat" OnValidSubmit="SendMessageClicked">
                        <DataAnnotationsValidator />
                        <div class="vstack gap-1">
                            <InputText @bind-Value="_chat.UserName" class="form-control w-25" placeholder="Username" />
                            <InputTextArea @bind-Value="_chat.Message" class="form-control" placeholder="Message" />
                        </div>
                        <button class="float-end btn btn-success mt-3" type="submit">Send</button>
                    </EditForm>

                </div>
            </div>

            <div class="card-footer fw-bold">
                @if (!_chatService.IsConnected)
                {
                    <div class="alert alert-danger">Chat Disconnected></div>
                }
                else
                {
                    <div class="alert alert-success">Chat Connected</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public static string? StoredUserName { get; set; }
    private Chat _chat = new();

    protected override async Task OnInitializedAsync()
    {
        _chatService.InvokeChatDisplay += StateHasChanged;
        await _chatService.StartConnectionAsync();
        _chatService.ReceiveMessage();
    }

    async void SendMessageClicked() =>
        await _chatService.SendChat(_chat);

    public void Dispose() =>
        _chatService.InvokeChatDisplay -= StateHasChanged;
}